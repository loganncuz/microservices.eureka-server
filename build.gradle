buildscript {
    ext {
        springBootVersion = '2.2.2.RELEASE'
    }
    repositories {
        mavenCentral()
//        maven {
//            url "https://plugins.gradle.org/m2/"
//        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
//        classpath "gradle.plugin.com.github.alexeylisyutenko:windows-service-plugin:1.1.0"
    }
}
//plugins {
//    id "com.github.alexeylisyutenko.windows-service-plugin" version "1.1.0"
//}

apply plugin: 'org.springframework.boot'
apply plugin: 'java-library'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'
mainClassName = 'com.ncuz.eureka.server.Application'

apply plugin: 'io.spring.dependency-management'

configurations {
    // configuration that holds jars to include in the jar
    deplib
}

group 'com.ncuz'
//version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

jar {
    archivesBaseName = 'eureka-server'
    manifest {
        attributes(
                'Main-Class': 'org.springframework.boot.loader.JarLauncher',
                'Class-Path': 'eureka-server.jar'
        )
    }
}

repositories {
    jcenter()
    maven {
        /*url ("http://nexus.saas.hand-china.com/content/repositories/rdc/",
                "https://projet.toutatice.fr/nexus/content/repositories/toutatice-releases/")*/
        url ("http://www.datanucleus.org/downloads/maven2/")
    }
    maven {
        /*url ("http://nexus.saas.hand-china.com/content/repositories/rdc/",
                "https://projet.toutatice.fr/nexus/content/repositories/toutatice-releases/")*/
        url ("https://projet.toutatice.fr/nexus/content/repositories/toutatice-releases/")
    }
//    maven { url 'https://repo.spring.io/milestone' }
}
ext {
    set('springCloudVersion', "Hoxton.SR3")
//     set('springCloudVersion', "Greenwich.SR4")
//    set('springBootVersion',  '2.1.9.RELEASE')
    set('springBootVersion',  '2.2.2.RELEASE')
}

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
        events "passed", "skipped", "failed"
    }
}

dependencyManagement {
    imports { mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"}
    imports { mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"}

}

dependencies {
    compile ("org.springframework.cloud:spring-cloud-starter-netflix-eureka-server"){
        exclude module: "spring-boot-starter-tomcat"
    }
//    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.cloud:spring-cloud-starter-config"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.boot:spring-boot-starter-test"
    compile "org.springframework.boot:spring-boot-devtools"


    // logger build up
    compile 'log4j:log4j:1.2.17'
    //  compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.0'
    //compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.11.0'
    // https://mvnrepository.com/artifact/com.jcabi/jcabi-log
    compile group: 'com.jcabi', name: 'jcabi-log', version: '0.18'
    compile group: 'org.fusesource.jansi', name: 'jansi', version: '1.18'
    // https://mvnrepository.com/artifact/commons-configuration/commons-configuration
    compile group: 'commons-configuration', name: 'commons-configuration', version: '1.10'

    // https://mvnrepository.com/artifact/commons-io/commons-io
    compile group: 'commons-io', name: 'commons-io', version: '2.4'

    // testing build up
    testImplementation('org.junit.jupiter:junit-jupiter:5.4.2')
    testImplementation 'junit:junit:4.12'

    // Lombok build up
//    compileOnly 'org.projectlombok:lombok:1.18.4'
//    annotationProcessor 'org.projectlombok:lombok:1.18.4'
    deplib  files('src/main/resources/log4j-helper.jar')
    deplib  files('src/main/resources/xml-reader.jar')
    deplib  files('src/main/resources/consolidation.jar')
    configurations.compile.extendsFrom(configurations.deplib)


}
